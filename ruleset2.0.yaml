modelVersion: 2.0

description: "ENM: Integration License Manager Pipeline"

docker:
  registry: https://armdocker.rnd.ericsson.se/proj-enm

docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-int-helm-chart-auto:latest
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/common-library-adp-helm-dr-check:latest
  - adp-release-cnbuild: armdocker.rnd.ericsson.se/proj_oss_releases/enm/adp-int-helm-chart-auto:latest
  - eric-enm-version-auto: armdocker.rnd.ericsson.se/proj-enm/eric-enm-version-auto:latest
  - cnbuild-build-utilities: armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest

properties:
  - helm-chart-name: eric-enm-int-license-manager
  - helm-chart-repo: https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-int-license-manager/
  - git_repo_url: https://gerrit-gamma.gic.ericsson.se/a/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enm-int-license-manager
  - int_chart_path: chart/eric-enm-int-license-manager
  - chart-repo-internal: https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/
  - chart-repo-drop: https://arm.epk.ericsson.se/artifactory/proj-enm-helm/

env:
  - RELEASE (default=true)
  - ENABLE_HELM_V3 (default=true)
  - ISO_VERSION (default=1.0.5555)
  - BUILD_DATE (default = $(date +%d%m%Y-%H%M%S --utc))
  - AUTHOR_NAME
  - AUTHOR_EMAIL
  - GIT_COMMITTER_NAME
  - GIT_COMMITTER_EMAIL
  - CHART_NAME (default=eric-lm-combined-server)
  - CHART_VERSION
  - CHART_REPO (default=https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm/)
  - ARM_API_TOKEN
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_REFSPEC (default="")
  - NAMESPACE
  - HELM_REPO_CREDENTIALS
  - HELM_REPO_TOKEN
  - HELM_INTERNAL_REPO
  - INT_CHART_REPO (default=https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm)
  - INT_CHART_VERSION
  - INT_CHART (default=eric-enm-int-license-manager)

var:
  - commit-hash
  - version
  - version-prefix
  - rstate
  - pod-name
  - pod-running-status-1
  - pod-running-status-2
  - pod-running-status-3

rules:
  clean:
    - task: rm-clean
      cmd:
        - rm -rf .bob/
        - rm -f artifact.properties

  clean-test:
    - task: clean-test-artifacts
      cmd:
        - find ./ -type f -regex '${env.INT_CHART}-.*.tgz' -exec rm {} \;
        - rm -rf .bob*
        - rm -rf build

  generate-new-version:
    - task: generate-version
      docker-image: adp-release-auto
      cmd: generate-version -f VERSION_PREFIX --is-release ${env.RELEASE} --output version
    - task: set-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: generate-rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: get-commit-hash
      docker-image: adp-release-auto
      cmd: git rev-parse --short HEAD > .bob/var.commit-hash

  dep-helm:
    - task: helm-dep-up
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=${env.ENABLE_HELM_V3}"
      cmd: helm dep up chart/${helm-chart-name}

  lint-helm:
    - task: helm-lint
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=${env.ENABLE_HELM_V3}"
      cmd: helm lint chart/${helm-chart-name}

  test-helm:
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: java -DhelmDesignRule.feature.dependency=1 -jar /helm-dr-check.jar --helm-chart chart/${helm-chart-name} -f test/values.yaml -c

  build-helm:
    - task: helm-package
      docker-image: adp-release-auto
      docker-flags:
        - "--env ENABLE_HELM_V3=${env.ENABLE_HELM_V3}"
      cmd: helm-package --folder chart/${helm-chart-name} --version ${var.version} --replace VERSION=${var.version} --replace RSTATE=${var.rstate}

  push-helm:
    - task: helm-push
      docker-image: adp-release-auto
      cmd: upload_file.sh --filename=.bob/${helm-chart-name}-${var.version}.tgz --repository=${helm-chart-repo} --api-token=${env.HELM_REPO_TOKEN}

  create-git-tag:
    - task: create-git-tag
      docker-image: adp-release-auto
      docker-flags:
        - "--env GIT_COMMITTER_NAME='${env.GIT_COMMITTER_NAME}'"
        - "--env GIT_COMMITTER_EMAIL='${env.GIT_COMMITTER_EMAIL}'"
      cmd: git tag --annotate ${var.version} --message "Build Version ${var.version} by ${env.AUTHOR_NAME} <${env.AUTHOR_EMAIL}>"

  remove-git-tag:
    - task: remove-git-tag
      docker-image: adp-release-auto
      cmd: git tag --delete ${var.version}

  prepare:
    - task: prepare-chart
      docker-image: adp-release-auto
      docker-flags:
        - -v /etc/group:/etc/group:ro
        - -v /etc/passwd:/etc/passwd:ro
        - -v '${env.HELM_REPO_CREDENTIALS}':'${env.HELM_REPO_CREDENTIALS}'
        - --env GERRIT_USERNAME="${env.GERRIT_USERNAME}"
        - --env GERRIT_PASSWORD="${env.GERRIT_PASSWORD}"
        - --env GIT_REPO_URL="${git_repo_url}"
        - --env GERRIT_REFSPEC=${env.GERRIT_REFSPEC}
        - --env CHART_PATH="${int_chart_path}"
        - --env HELM_INTERNAL_REPO="${chart-repo-internal}"
        - --env HELM_DROP_REPO="${chart-repo-internal}"
        - --env HELM_RELEASED_REPO="${chart-repo-internal}"
        - --env ARM_API_TOKEN="${env.ARM_API_TOKEN}"
        - --env ALLOW_DOWNGRADE="true"
        - --env CHART_NAME="${env.CHART_NAME}"
        - --env CHART_VERSION="${env.CHART_VERSION}"
        - --env CHART_REPO="${env.CHART_REPO}"
        - --env IGNORE_NON_RELEASED="false"
        - --env AUTOMATIC_RELEASE="false"
        - --env ALWAYS_RELEASE="true"
        - --env VERSION_STEP_STRATEGY_DEPENDENCY="DYNAMIC"
        - --env HELM_REPO_CREDENTIALS="${env.HELM_REPO_CREDENTIALS}"
        - --env CI_HELM="true"
      cmd:
        - ihc-auto prepare

  publish:
    - task: publish-chart
      docker-image: adp-release-auto
      docker-flags:
        - -v /etc/group:/etc/group:ro
        - -v /etc/passwd:/etc/passwd:ro
        - -v '${env.HELM_REPO_CREDENTIALS}':'${env.HELM_REPO_CREDENTIALS}'
        - --env GERRIT_USERNAME="${env.GERRIT_USERNAME}"
        - --env GERRIT_PASSWORD="${env.GERRIT_PASSWORD}"
        - --env GIT_REPO_URL="${git_repo_url}"
        - --env CHART_PATH="${int_chart_path}"
        - --env HELM_INTERNAL_REPO="${chart-repo-drop}"
        - --env HELM_DROP_REPO="${chart-repo-drop}"
        - --env HELM_RELEASED_REPO="${chart-repo-drop}"
        - --env ARM_API_TOKEN="${env.ARM_API_TOKEN}"
        - --env ALLOW_DOWNGRADE="true"
        - --env CHART_NAME="${env.CHART_NAME}"
        - --env CHART_VERSION="${env.CHART_VERSION}"
        - --env CHART_REPO="${env.CHART_REPO}"
        - --env IGNORE_NON_RELEASED="false"
        - --env AUTOMATIC_RELEASE="false"
        - --env ALWAYS_RELEASE="false"
        - --env HELM_REPO_CREDENTIALS="${env.HELM_REPO_CREDENTIALS}"
        - --env CI_HELM="true"

      cmd:
        - ihc-auto publish

  create-namespace:
    - task: create-namespace
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl create namespace ${env.NAMESPACE}

  download-dependency-helm-charts:
    - task: download-sysinfo-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -c "helm repo add sys-info-repo https://arm.sero.gic.ericsson.se/artifactory/proj-adp-eric-application-sys-info-handler-released-helm-local/
           && helm fetch sys-info-repo/eric-si-application-sys-info-handler --version 2.22.0+16"

    - task: download-document-database-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -c "helm repo add document-database-repo https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-adp-gs-all-helm/
           && helm fetch document-database-repo/eric-data-document-database-pg --version 8.18.0-11"

  install-dependency-helm-charts:
    - task: install-sysinfo-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: helm install sys-info -n ${env.NAMESPACE} --wait --debug --timeout 1000s  
        --set applicationInfoService.enabled=false 
        --set applicationInfoService.sendAppReport=false 
        --set asih.applicationId=applicationID-test  
        --set asih.enableCmypConfig=false 
        --set asih.networkPolicy.enabled=false 
        --set global.security.tls.enabled=false 
        eric-si-application-sys-info-handler-2.22.0+16.tgz

    - task: create-document-database-secrets
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl apply -f test/database-secret.yaml -n ${env.NAMESPACE}

    - task: install-document-database
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: helm install database -f test/database.yaml -n ${env.NAMESPACE} --wait --debug --timeout 1000s
        --set nameOverride=eric-lm-combined-server-db-pg
        --set postgresDatabase=licensemanager_db
        eric-data-document-database-pg-8.18.0-11.tgz

  install-helm-chart:
    - task: install-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: helm install eric-enm-int-license-manager-test -n ${env.NAMESPACE} --wait --debug  --timeout 600s 
        --set eric-lm-combined-server.database.credentials.secretName='db-credentials-secret'
        --set eric-lm-combined-server.database.host='eric-lm-combined-server-db-pg'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].productType='ENM'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].customerId='Ericsson'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].swltId='000001'
        --set eric-lm-combined-server.licenseServerClient.licenseServer.thrift.host='eric-test-nels-simulator'
        --set eric-lm-combined-server.licenseConsumerHandler.service.endpoints.externalHttps.tls.enforced='optional'
        --set eric-lm-combined-server.global.licensing.sites[0].hostname='eric-test-nels-simulator'
        --set eric-lm-combined-server.global.licensing.sites[0].priority=0
        --set eric-lm-combined-server.bandwidth.eric-lm-license-consumer-handler.maxEgressRate=null
        --set eric-lm-combined-server.bandwidth.eric-lm-license-server-client.maxEgressRate=null
        --set eric-lm-combined-server.licenseServerClient.timer.licenseRequestAggregationPeriod=60
        --set eric-lm-combined-server.licenseServerClient.timer.peakUsageReportAggregationPeriod=30
        --set metrics.enabled=true
        eric-enm-int-license-manager-${env.INT_CHART_VERSION}.tgz

  download-helm-chart:
    - task: download-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -c "helm repo add eric-enm-int-license-manager ${env.INT_CHART_REPO} 
        && helm fetch eric-enm-int-license-manager/eric-enm-int-license-manager --version ${env.INT_CHART_VERSION}"

  install-helm-chart-local:
    - task: install-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: helm install eric-enm-int-license-manager-test -n ${env.NAMESPACE} --wait --debug  --timeout 600s
        --set global.pullSecret=k8s-registry-secret 
        --set eric-lm-combined-server.database.credentials.secretName='db-credentials-secret'
        --set eric-lm-combined-server.database.host='eric-lm-combined-server-db-pg'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].productType='ENM'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].customerId='Ericsson'
        --set eric-lm-combined-server.global.ericsson.licensing.licenseDomains[0].swltId='000001'
        --set eric-lm-combined-server.licenseServerClient.licenseServer.thrift.host='eric-test-nels-simulator'
        --set eric-lm-combined-server.licenseConsumerHandler.service.endpoints.externalHttps.tls.enforced='optional'
        --set eric-lm-combined-server.global.licensing.sites[0].hostname='eric-test-nels-simulator'
        --set eric-lm-combined-server.global.licensing.sites[0].priority=0
        --set eric-lm-combined-server.bandwidth.eric-lm-license-consumer-handler.maxEgressRate=null
        --set eric-lm-combined-server.bandwidth.eric-lm-license-server-client.maxEgressRate=null
        --set eric-lm-combined-server.licenseServerClient.timer.licenseRequestAggregationPeriod=60
        --set eric-lm-combined-server.licenseServerClient.timer.peakUsageReportAggregationPeriod=30
        --set metrics.enabled=true
        .bob/eric-enm-int-license-manager-1.0.0-1.dirty.tgz

  test-cases:
    - task: retrieve-pod-name-1
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} | grep eric-lm-combined-server-license-consumer-handler | head -1 | awk '{ print $1 }' > .bob/var.pod-name

    - task: retrieve-pod-condition-1
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl wait --for=condition=Ready pod/${var.pod-name} --timeout=300s -n ${env.NAMESPACE}

    - task: pod-running-status-1
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} ${var.pod-name} | grep eric-lm-combined-server | awk '{ print $2 }' > .bob/var.pod-running-status-1

    - task: retrieve-pod-name-2
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} | grep eric-lm-combined-server-license-consumer-handler | tail | awk '{ print $1 }' > .bob/var.pod-name

    - task: retrieve-pod-condition-2
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl wait --for=condition=Ready pod/${var.pod-name} --timeout=300s -n ${env.NAMESPACE}

    - task: pod-running-status-2
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} ${var.pod-name} | grep eric-lm-combined-server | awk '{ print $2 }' > .bob/var.pod-running-status-2

    - task: retrieve-pod-name-3
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} | grep eric-lm-combined-server-license-server-client | awk '{ print $1 }' > .bob/var.pod-name

    - task: retrieve-pod-condition-3
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl wait --for=condition=Ready pod/${var.pod-name} --timeout=300s -n ${env.NAMESPACE}

    - task: pod-running-status-3
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} ${var.pod-name} | grep eric-lm-combined-server | awk '{ print $2 }' > .bob/var.pod-running-status-3

    - task: pods-running-status-check
      cmd: if [ "${var.pod-running-status-1}" == "1/1" ] && [ "${var.pod-running-status-2}" == "1/1" ] && [ "${var.pod-running-status-3}" == "1/1" ]; then echo "RESULT Success-- Pod is up and running"; else echo "RESULT Failed-- Pod is not up and running"; exit 1; fi

  teardown:
    - task: helm-teardown
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl delete namespace ${env.NAMESPACE} --wait --timeout 3m
